// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/orders.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OrderQueue_AddOrder_FullMethodName = "/queue.OrderQueue/AddOrder"
	OrderQueue_GetOrder_FullMethodName = "/queue.OrderQueue/GetOrder"
)

// OrderQueueClient is the client API for OrderQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderQueueClient interface {
	AddOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	GetOrder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderResponse, error)
}

type orderQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderQueueClient(cc grpc.ClientConnInterface) OrderQueueClient {
	return &orderQueueClient{cc}
}

func (c *orderQueueClient) AddOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderQueue_AddOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueClient) GetOrder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderQueue_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderQueueServer is the server API for OrderQueue service.
// All implementations must embed UnimplementedOrderQueueServer
// for forward compatibility
type OrderQueueServer interface {
	AddOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	GetOrder(context.Context, *Empty) (*OrderResponse, error)
	mustEmbedUnimplementedOrderQueueServer()
}

// UnimplementedOrderQueueServer must be embedded to have forward compatible implementations.
type UnimplementedOrderQueueServer struct {
}

func (UnimplementedOrderQueueServer) AddOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
	func (UnimplementedOrderQueueServer) GetOrder(context.Context, *Empty) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderQueueServer) mustEmbedUnimplementedOrderQueueServer() {}

// UnsafeOrderQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderQueueServer will
// result in compilation errors.
type UnsafeOrderQueueServer interface {
	mustEmbedUnimplementedOrderQueueServer()
}

func RegisterOrderQueueServer(s grpc.ServiceRegistrar, srv OrderQueueServer) {
	s.RegisterService(&OrderQueue_ServiceDesc, srv)
}

func _OrderQueue_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueue_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServer).AddOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueue_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueue_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServer).GetOrder(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderQueue_ServiceDesc is the grpc.ServiceDesc for OrderQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.OrderQueue",
	HandlerType: (*OrderQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _OrderQueue_AddOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderQueue_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orders.proto",
}
